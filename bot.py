from aiogram import Dispatcher, types, executor, Bot
from openpyxl import load_workbook, Workbook
from config import load_config
from data import data_by_id, data_to_notifications, dataXlsx
from connect_db import subscriber_exists, add_subscriber, update_subscription, subscriber_status, get_subscriptions, get_len, add_len
import asyncio
import logging
import keyboards as kb


wbSearch = load_workbook('data.xlsx')
sheet = wbSearch.active


logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–æ—Ç—É
token = load_config().get('Token')
bot = Bot(token=token)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫!', reply_markup=kb.greet_kb)



# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['KGZüá∞üá¨', 'RUüá∑üá∫'])
async def len(message: types.Message):
    # print(message.text)
    if message.text == '/KGZüá∞üá¨':
        if not get_len(message.from_user.id):
            print('yes')
            add_len(message.from_user.id, 'kgz')
        await message.answer(text='–°–∞–ª–∞–º–∞—Ç—Å—ã–∑–±—ã!\n–¢–æ–≤–∞—Ä–ª–∞—Ä—ã“£—ã–∑–¥—ã –∫”©–∑”©–º”©–ª–¥”©”© “Ø—á“Ø–Ω –∂–∞–∑—ã“£—ã–∑ /info —Å–∏–∑–¥–∏–Ω –∂–µ–∫–µ '
                                '–Ω–æ–º–µ—Ä–∏“£–∏–∑\n–ö–∞—Ç—É—É —Ñ–æ—Ä–º–∞—Ç—Ç–∞ –±–æ–ª—É—à –∫–µ—Ä–µ–∫ GX-0000 –∂–µ 0000!!!\n–≠–≥–µ—Ä –±—É—é–º—É“£—É–∑ –∂”©–Ω“Ø–Ω–¥”© —ç—Å–∫–µ—Ä—Ç–º–µ–ª–µ—Ä–¥–∏ –∞–ª–≥—ã“£—ã–∑ –∫–µ–ª—Å–µ, –∞–Ω–¥–∞ /subscribe GX-0000')
    elif message.text == '/RUüá∑üá∫':
        if not get_len(message.from_user.id):
            add_len(message.from_user.id, 'ru')
        await message.answer(text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤–≤–µ–¥–∏—Ç–µ /info –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π '
                                '–Ω–æ–º–µ—Ä\n–°—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä—Ç–º–∞—Ç–µ GX-0000 –∏–ª–∏ 0000!!!\n–í–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–µ–º —Ç–æ–≤–∞—Ä, —Ç–æ /subscribe GX-0000')



# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
@dp.message_handler(commands='info')
async def info(message: types.Message):
    # RU
    if get_len(message.from_user.id)[0][0] == 'ru':
        id = str(message.text[6:])
        if id.__len__() == 7 and id[:3] == 'GX-':
            """–ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∏–¥—ã GX –∫–æ–¥–∞"""
            ex1 = id
            ex2 = id[3:]
            ex3 = id[4:]
            ex4 = id[5:]

            await message.answer(text='–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É...')

            data = asyncio.create_task(data_by_id(ex1, ex2, ex3, ex4))
            await data


            """–ü—Ä–æ–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
            if not data.result()[0]:
                await message.answer(text='–¢–æ–≤–∞—Ä–æ–≤ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ—Ç!')
            else:
                for i in range((data.result().__len__())):
                    await message.answer(text=data.result()[i])
        elif id.__len__() == 4:
            """–ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∏–¥—ã GX –∫–æ–¥–∞"""
            ex1 = 'GX-' + id
            ex2 = id
            ex3 = id[1:]
            ex4 = id[2:]


            await message.answer(text='–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É...')

            data = asyncio.create_task(data_by_id(ex1, ex2, ex3, ex4))

            await data


            """–ü—Ä–æ–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
            if not data.result()[0]:
                await message.answer(text='–¢–æ–≤–∞—Ä–æ–≤ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ—Ç!')
            else:
                for i in range((data.result().__len__())):
                    await message.answer(text=data.result()[i])
        else:
            await message.answer(text='–°—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä—Ç–º–∞—Ç–µ GX-0000 –∏–ª–∏ 0000!!!')

    # KGZ
    elif get_len(message.from_user.id)[0][0] == 'kgz':
        id = message.text[6:]
        if len(id) == 7 and id[:3] == 'GX-':
            """–ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∏–¥—ã GX –∫–æ–¥–∞"""
            ex1 = id
            ex2 = id[3:]
            ex3 = id[4:]
            ex4 = id[5:]

            await message.answer(text='–ë–∏—Ä –º“Ø–Ω”©—Ç –∫“Ø—Ç”©”© —Ç—É—Ä—É“£—É–∑...')

            data = asyncio.create_task(data_by_id(ex1, ex2, ex3, ex4))

            await data
            print(len(data.result()))

            """–ü—Ä–æ–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
            if not data.result()[0]:
                await message.answer(text='–ú—ã–Ω–¥–∞–π –∫–æ–¥—É –±–∞—Ä —Ç–æ–≤–∞—Ä–ª–∞—Ä –∂–æ–∫!')
            else:
                for i in range(len(data.result())):
                    await message.answer(text=data.result()[i])
        elif len(id) == 4:
            """–ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∏–¥—ã GX –∫–æ–¥–∞"""
            ex1 = 'GX-' + id
            ex2 = id
            ex3 = id[1:]
            ex4 = id[2:]
            print(ex3, ex4)

            await message.answer(text='–ë–∏—Ä –º“Ø–Ω”©—Ç –∫“Ø—Ç”©”© —Ç—É—Ä—É“£—É–∑...')

            data = asyncio.create_task(data_by_id(ex1, ex2, ex3, ex4))

            await data
            print(len(data.result()))

            """–ü—Ä–æ–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
            if not data.result()[0]:
                await message.answer(text='–ú—ã–Ω–¥–∞–π –∫–æ–¥—É –±–∞—Ä —Ç–æ–≤–∞—Ä–ª–∞—Ä –∂–æ–∫!')
            else:
                for i in range(len(data.result())):
                    await message.answer(text=data.result()[i])
        else:
            await message.answer(text='–ö–∞—Ç—É—É —Ñ–æ—Ä–º–∞—Ç—Ç–∞ –±–æ–ª—É—à –∫–µ—Ä–µ–∫ GX-0000 –∂–µ 0000!!!')



# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(commands=['subscribe'])
async def subscribe(message):
    if get_len(message.from_user.id) == 'ru':
        if (str(message.text)).__len__() != 18:
            await message.answer('–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ /subscribe GX-0000')
        gx = message.text[11:]
        if not subscriber_exists(message.from_user.id, gx):
            """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
            add_subscriber(message.from_user.id, gx)
            await message.answer('–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –ø—Ä–∏–¥–µ—Ç, –≤—ã —Å—Ä–∞–∑—É –∂–µ –æ–± —ç—Ç–æ–º —É–∑–Ω–∞–µ—Ç–µ!')
        elif subscriber_exists(message.from_user.id, gx) and not subscriber_status(message.from_user.id):
            """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"""
            update_subscription(message.from_user.id, True)
            await message.answer('–í—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –ø—Ä–∏–¥–µ—Ç, –≤—ã —Å—Ä–∞–∑—É –∂–µ –æ–± —ç—Ç–æ–º —É–∑–Ω–∞–µ—Ç–µ!')
        else:
            """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–∫—Ç–∏–≤–µ–Ω"""
            await message.answer('–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!')

            
    elif get_len(message.from_user.id) == 'kgz':
        if (str(message.text)).__len__() != 18:
            await message.answer('–ö–∞—Ç—É—É —Ñ–æ—Ä–º–∞—Ç—Ç–∞ –±–æ–ª—É—à –∫–µ—Ä–µ–∫ /subscribe GX-0000')
        gx = message.text[11:]
        if not subscriber_exists(message.from_user.id, gx):
            """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
            add_subscriber(message.from_user.id, gx)
            await message.answer('–°–∏–∑ —ç—Å–∫–µ—Ä—Ç–º–µ–ª–µ—Ä–≥–µ –∂–∞–∑—ã–ª–¥—ã“£—ã–∑!\n–≠–≥–µ—Ä–¥–µ –ø—Ä–æ–¥—É–∫—Ç –∫–µ–ª—Å–µ, —Å–∏–∑ –±—É–ª –∂”©–Ω“Ø–Ω–¥”© –¥–∞—Ä–æ–æ –±–∏–ª–µ—Å–∏–∑!')
        elif subscriber_exists(message.from_user.id, gx) and not subscriber_status(message.from_user.id):
            """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"""
            update_subscription(message.from_user.id, True)
            await message.answer('–°–∏–∑ —ç—Å–∫–µ—Ä—Ç–º–µ–ª–µ—Ä–≥–µ –∂–∞–∑—ã–ª–¥—ã“£—ã–∑ –∫–∞–π—Ç–∞!\n–≠–≥–µ—Ä–¥–µ –ø—Ä–æ–¥—É–∫—Ç –∫–µ–ª—Å–µ, —Å–∏–∑ –±—É–ª –∂”©–Ω“Ø–Ω–¥”© –¥–∞—Ä–æ–æ –±–∏–ª–µ—Å–∏–∑!')
        else:
            """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–∫—Ç–∏–≤–µ–Ω"""
            await message.answer('–°–∏–∑ —ç—Å–∫–µ—Ä—Ç–º–µ–ª–µ—Ä–≥–µ —É–∂–µ –∂–∞–∑—ã–ª–¥—ã“£—ã–∑!')


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(commands=['unsubscribe'])
async def unsubscribe(message):
    if get_len(message.from_user.id) == 'ru':
        if (str(message.text)).__len__() != 20:
            await message.answer('–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ /unsubscribe GX-0000')
        gx = message.text[13:]
        if subscriber_exists(message.from_user.id, gx) and subscriber_status(message.from_user.id):
            """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–∫—Ç–∏–≤–µ–Ω"""
            update_subscription(message.from_user.id, False)
            await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!')
        else:
            """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"""
            await message.answer('–í—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!')

    elif get_len(message.from_user.id) == 'kgz':
        if (str(message.text)).__len__() != 20:
            await message.answer('–ö–∞—Ç—É—É —Ñ–æ—Ä–º–∞—Ç—Ç–∞ –±–æ–ª—É—à –∫–µ—Ä–µ–∫ /unsubscribe GX-0000')
        gx = message.text[13:]
        if subscriber_exists(message.from_user.id, gx) and subscriber_status(message.from_user.id):
            """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–∫—Ç–∏–≤–µ–Ω"""
            update_subscription(message.from_user.id, False)
            await message.answer('–≠—Å–∫–µ—Ä—Ç–º–µ–ª–µ—Ä–¥–∏ –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∂–æ–∫–∫–æ —á—ã–≥–∞—Ä–¥—ã“£—ã–∑!')
        else:
            """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"""
            await message.answer('–°–∏–∑ –∞–Ω—Å—ã–∑ –¥–µ–ª–µ –∂–∞–∑—ã–ª–±–∞–π—Å—ã–∑!')        


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
@dp.message_handler(content_types=['document'])
async def get_new_table(message):
    if get_len(message.from_user.id) == 'ru':
        file = await bot.get_file(message.document.file_id)
        await bot.download_file(file.file_path, 'data.xlsx')
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É!')
    elif get_len(message.from_user.id) == 'kgz':
        file = await bot.get_file(message.document.file_id)
        await bot.download_file(file.file_path, 'data.xlsx')
        await message.answer('–ñ–∞“£—ã —Ç–∞–±–ª–∏—Ü–∞–Ω—ã –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∂“Ø–∫—Ç”©–¥“Ø“£“Ø–∑!')


async def notifications(delay):
    while True:
        await asyncio.sleep(delay)
        data = data_to_notifications()
        str_to_send = ''
        for obj in get_subscriptions():
            for tup in data:
                gx = tup[0]
                if type(tup[0]) == int:
                    gx = str(tup[0])
                if obj[2] == gx or obj[2] == '0'+gx or obj[2] == '00'+gx or obj[2] == 'GX-00'+gx or obj[2] == 'ML-0'+gx:
                    str_to_send += f'–í–∞—à —Ç–æ–≤–∞—Ä —Å —Ç—Ä–µ–∫–æ–º {tup[1]} –ø—Ä–∏—à–µ–ª!\n'
            await bot.send_message(obj[1], str_to_send)

@dp.message_handler(commands=['test'])
async def tester(message: types.Message):
    if get_len(message.from_user.id)[0][0] == 'ru':
        id = str(message.text[6:])
        if id.__len__() == 7 and id[:3] == 'GX-':
            """–ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∏–¥—ã GX –∫–æ–¥–∞"""
            ex1 = id
            ex2 = id[3:]
            ex3 = id[4:]
            ex4 = id[5:]

            await message.answer(text='–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É...')

            asyncio.create_task(dataXlsx(ex1, ex2, ex3, ex4))
            fail = open('to_data.wlsx', 'rb')
            await message.answer_document(message.chat.id, document=fail)
        elif id.__len__() == 4:
            """–ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∏–¥—ã GX –∫–æ–¥–∞"""
            ex1 = 'GX-' + id
            ex2 = id
            ex3 = id[1:]
            ex4 = id[2:]


            await message.answer(text='–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É...')

            asyncio.create_task(dataXlsx(ex1, ex2, ex3, ex4))

            fail = open('to_data.wlsx', 'rb')
            await message.answer_document(message.chat.id, document=fail)
        else:
            await message.answer(text='–°—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä—Ç–º–∞—Ç–µ GX-0000 –∏–ª–∏ 0000!!!')

    # KGZ
    elif get_len(message.from_user.id)[0][0] == 'kgz':
        id = message.text[6:]
        if len(id) == 7 and id[:3] == 'GX-':
            """–ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∏–¥—ã GX –∫–æ–¥–∞"""
            ex1 = id
            ex2 = id[3:]
            ex3 = id[4:]
            ex4 = id[5:]

            await message.answer(text='–ë–∏—Ä –º“Ø–Ω”©—Ç –∫“Ø—Ç”©”© —Ç—É—Ä—É“£—É–∑...')

            asyncio.create_task(dataXlsx(ex1, ex2, ex3, ex4))

            fail = open('to_data.wlsx', 'rb')
            await message.answer_document(message.chat.id, document=fail)

        elif len(id) == 4:
            """–ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∏–¥—ã GX –∫–æ–¥–∞"""
            ex1 = 'GX-' + id
            ex2 = id
            ex3 = id[1:]
            ex4 = id[2:]
            print(ex3, ex4)

            await message.answer(text='–ë–∏—Ä –º“Ø–Ω”©—Ç –∫“Ø—Ç”©”© —Ç—É—Ä—É“£—É–∑...')

            asyncio.create_task(dataXlsx(ex1, ex2, ex3, ex4))

            fail = open('to_data.wlsx', 'rb')
            await message.answer_document(message.chat.id, document=fail)

        else:
            await message.answer(text='–ö–∞—Ç—É—É —Ñ–æ—Ä–º–∞—Ç—Ç–∞ –±–æ–ª—É—à –∫–µ—Ä–µ–∫ GX-0000 –∂–µ 0000!!!')



if __name__ == '__main__':
    executor.start_polling(dp)
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(notifications(43200))

